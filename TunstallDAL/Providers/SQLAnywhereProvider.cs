using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using iAnywhere.Data.SQLAnywhere;

namespace TunstallDAL.Providers
{
    class SQLAnywhereProvider : DALBase, IDataProvider    {        public SQLAnywhereProvider()
        {

        }



        #region " Private Methods "        private SAConnection CreateConnection()        {            SAConnection conn = new SAConnection(ConnectionName);            conn.Open();            return conn;        }        private SACommand CreateCommand(CommandType _type, SAConnection _conn, string _sql, List<SQLParam> _params)        {            SACommand _cmd = new SACommand(_sql, _conn);            _cmd.CommandType = _type;            _cmd.CommandTimeout = 120;            if (_params != null)            {                if (_params.Count > 0)                {                    foreach (SQLParam p in _params)                    {                        _cmd.Parameters.Add(new SAParameter(p.Name, p.Value));                    }                }            }            return _cmd;        }        private void Dispose(SAConnection _conn)        {            if (_conn != null)            {                if (_conn.State == ConnectionState.Open)                    _conn.Close();                _conn.Dispose();            }        }




        #endregion
        #region " Interface Implemenatation "
        public DataTable GetData(CommandType type, string sql, List<SQLParam> parms)        {            DataTable dt = new DataTable();            SAConnection _conn = null;            try            {                _conn = this.CreateConnection();                SACommand _cmd = this.CreateCommand(type, _conn, sql, parms);                SADataAdapter _adp = new SADataAdapter(_cmd);                _adp.Fill(dt);            }            catch (Exception ex)            {                string _err = string.Format("SQLAnywhereProvider.ExecuteDataSet error: {0}", ex);                throw new Exception(_err);            }            finally            {                this.Dispose(_conn);            }            return dt;        }        public DataTable GetData(string sql, List<SQLParam> parms)        {            return this.GetData(CommandType.Text, sql, parms);        }        public DataSet ExecuteDataSet(string _procName, List<SQLParam> _parameters)        {            DataSet _ds = new DataSet();            SAConnection _conn = null;            try            {                _conn = this.CreateConnection();                SACommand _cmd = this.CreateCommand(CommandType.Text, _conn, _procName, _parameters);                SADataAdapter _adp = new SADataAdapter(_cmd);                _adp.Fill(_ds);            }            catch (Exception ex)            {                string _err = string.Format("SQLAnywhereProvider.ExecuteDataSet error: {0}", ex);                throw new Exception(_err);            }            finally            {                this.Dispose(_conn);            }            return _ds;        }        public DataSet ExecuteDataSetQuery(string _sqlString, List<SQLParam> _parameters)        {            DataSet _ds = new DataSet();            SAConnection _conn = null;            try            {                _conn = this.CreateConnection();                SACommand _cmd = this.CreateCommand(CommandType.Text, _conn, _sqlString, _parameters);                SADataAdapter _adp = new SADataAdapter(_cmd);                _adp.Fill(_ds);            }            catch (Exception ex)            {                string _err = string.Format("SQLAnywhereProvider.ExecuteDataSetQuery error: {0}", ex);                throw new Exception(_err);            }            finally            {                this.Dispose(_conn);            }            return _ds;        }        public int ExecuteNonQuery(string _procName, List<SQLParam> _parameter)        {            int _retValue = -1;            SAConnection _conn = null;            try            {                _conn = this.CreateConnection();                SACommand _cmd = this.CreateCommand(CommandType.Text, _conn, _procName, _parameter);                _retValue = _cmd.ExecuteNonQuery();            }            catch (Exception ex)            {                string _err = string.Format("SQLAnywhereProvider.ExecuteNonQuery error: {0}", ex);                throw new Exception(_err);            }            finally            {                this.Dispose(_conn);            }            return _retValue;        }        public int ExecuteNonSPQuery(string _sql, List<SQLParam> _parameters)        {            int _retValue = -1;            SAConnection _conn = null;            try            {                _conn = this.CreateConnection();                SACommand _cmd = this.CreateCommand(CommandType.Text, _conn, _sql, _parameters);                _retValue = _cmd.ExecuteNonQuery();            }            catch (Exception ex)            {                string _err = string.Format("SQLAnywhereProvider.ExecuteNonSPQuery error: {0}", ex);                throw new Exception(_err);            }            finally            {                this.Dispose(_conn);            }            return _retValue;        }        public T ExecuteScalar<T>(CommandType type, string sql, List<SQLParam> parms)        {            SAConnection _conn = null;            try            {                _conn = this.CreateConnection();                SACommand _cmd = this.CreateCommand(type, _conn, sql, parms);                return (T)_cmd.ExecuteScalar();            }            catch (Exception ex)            {                string _err = string.Format("SQLAnywhereProvider.ExecuteScalar error: {0}", ex);                throw new Exception(_err);            }            finally            {                this.Dispose(_conn);            }        }        public T ExecuteScalar<T>(string procName, List<SQLParam> parms)        {            return this.ExecuteScalar<T>(CommandType.Text, procName, parms);        }


        #endregion    }
}
